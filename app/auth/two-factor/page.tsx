"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Input } from "@/components/ui/input"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Icons } from "@/components/icons"
import { CheckCircle2, Loader2, Smartphone, Key, AlertCircle, ArrowLeft } from "lucide-react"
import Link from "next/link"
import { useRouter } from "next/navigation"

const STEPS = {
  SCAN_QR: 'scan_qr',
  ENTER_CODE: 'enter_code',
  COMPLETE: 'complete'
} as const

type Step = keyof typeof STEPS

export default function TwoFactorSetupPage() {
  const [step, setStep] = useState<Step>('SCAN_QR')
  const [code, setCode] = useState(['', '', '', '', '', ''])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [recoveryCodes, setRecoveryCodes] = useState<string[]>([])
  const [countdown, setCountdown] = useState(30)
  const router = useRouter()

  // Mock QR code data - in a real app, this would come from your backend
  const qrCodeData = 'otpauth://totp/FamilyWealthTracker:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=FamilyWealthTracker&algorithm=SHA1&digits=6&period=30'
  
  // Mock backup codes - in a real app, these would be generated by the backend
  const mockRecoveryCodes = [
    'ABCD-1234-EFGH',
    'IJKL-5678-MNOP',
    'QRST-9012-UVWX',
    'YZ12-3456-7890',
    'ABCD-EFGH-IJKL',
    'MNOP-QRST-UVWX',
    'YZ12-3456-7890',
    'ABCD-EFGH-IJKL',
    'MNOP-QRST-UVWX',
    'YZ12-3456-7890'
  ]

  useEffect(() => {
    if (step === 'ENTER_CODE') {
      // Start countdown for code expiration
      const timer = setInterval(() => {
        setCountdown((prev: number) => (prev > 0 ? prev - 1 : 0))
      }, 1000)
      
      return () => clearInterval(timer)
    }
  }, [step])

  const handleCodeChange = (index: number, value: string) => {
    if (value.length > 1) return
    
    const newCode = [...code]
    newCode[index] = value
    setCode(newCode)
    
    // Auto-focus next input
    if (value && index < 5) {
      const nextInput = document.getElementById(`code-${index + 1}`)
      if (nextInput) nextInput.focus()
    }
  }
  
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {
    if (e.key === 'Backspace' && !code[index] && index > 0) {
      const prevInput = document.getElementById(`code-${index - 1}`)
      if (prevInput) prevInput.focus()
    }
  }
  
  const verifyCode = (verificationCode: string) => {
    setIsLoading(true)
    setError('')
    
    // Simulate API call
    setTimeout(() => {
      // In a real app, you would verify the code with your backend
      const isValid = verificationCode === '123456' // Mock validation
      
      if (isValid) {
        setStep('COMPLETE')
        setRecoveryCodes(mockRecoveryCodes)
      } else {
        setError('Invalid verification code. Please try again.')
        setCode(['', '', '', '', '', ''])
        // Focus first input
        const firstInput = document.getElementById('code-0') as HTMLInputElement
        firstInput?.focus()
      }
      
      setIsLoading(false)
    }, 1000)
  }
  
  const handleResendCode = () => {
    // In a real app, this would request a new code from your backend
    setCode(['', '', '', '', '', ''])
    setCountdown(30)
    setError('')
    
    // Focus first input
    const firstInput = document.getElementById('code-0') as HTMLInputElement
    firstInput?.focus()
  }
  
  const handleCopyCodes = () => {
    navigator.clipboard.writeText(recoveryCodes.join('\n'))
      .then(() => {
        // Show success message
        const copyBtn = document.getElementById('copy-codes-btn')
        if (copyBtn) {
          const originalText = copyBtn.textContent
          copyBtn.textContent = 'Copied!'
          setTimeout(() => {
            if (copyBtn) copyBtn.textContent = originalText
          }, 2000)
        }
      })
      .catch(err => {
        console.error('Failed to copy codes:', err)
      })
  }
  
  const handleDownloadCodes = () => {
    const element = document.createElement('a')
    const file = new Blob([recoveryCodes.join('\n')], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = 'family-wealth-tracker-recovery-codes.txt'
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }
  
  const handleComplete = () => {
    // In a real app, you would redirect to the dashboard or previous page
    router.push('/dashboard')
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-between">
            <Button 
              variant="ghost" 
              size="icon" 
              className="h-8 w-8"
              onClick={() => step === 'SCAN_QR' ? router.back() : setStep('SCAN_QR')}
            >
              <ArrowLeft className="h-4 w-4" />
              <span className="sr-only">Back</span>
            </Button>
            <div className="flex-1 text-center">
              <CardTitle className="text-2xl font-bold">
                {step === 'SCAN_QR' && 'Set Up 2FA'}
                {step === 'ENTER_CODE' && 'Verify Code'}
                {step === 'COMPLETE' && '2FA Enabled'}
              </CardTitle>
            </div>
            <div className="w-8"></div> {/* Spacer for alignment */}
          </div>
          <CardDescription>
            {step === 'SCAN_QR' && 'Secure your account with two-factor authentication'}
            {step === 'ENTER_CODE' && 'Enter the 6-digit code from your authenticator app'}
            {step === 'COMPLETE' && 'Two-factor authentication has been enabled for your account'}
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {step === 'SCAN_QR' && (
            <div className="space-y-6">
              <div className="space-y-4">
                <div className="bg-white p-4 rounded-lg border border-gray-200 dark:border-gray-700 flex justify-center">
                  {/* In a real app, this would be a QR code component */}
                  <div className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-center">
                    <Smartphone className="h-12 w-12 mx-auto text-gray-400 mb-2" />
                    <p className="text-sm text-gray-500">QR Code would appear here</p>
                    <p className="text-xs text-gray-400 mt-2">Scan with your authenticator app</p>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <p className="text-sm font-medium">Or enter this code manually:</p>
                  <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-md font-mono text-sm text-center">
                    JBSWY3DPEHPK3PXP
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Enter this code in your authenticator app to set up 2FA
                  </p>
                </div>
              </div>
              
              <div className="space-y-2">
                <h3 className="text-sm font-medium">Don't have an authenticator app?</h3>
                <p className="text-sm text-muted-foreground">
                  Download an authenticator app like Google Authenticator or Authy from your app store.
                </p>
              </div>
              
              <Button 
                className="w-full" 
                onClick={() => setStep('ENTER_CODE')}
              >
                I've set up my authenticator app
              </Button>
            </div>
          )}
          
          {step === 'ENTER_CODE' && (
            <div className="space-y-6">
              <div className="space-y-2">
                <div className="flex justify-center space-x-2">
                  {code.map((digit, index) => (
                    <Input
                      key={index}
                      id={`code-${index}`}
                      type="text"
                      inputMode="numeric"
                      maxLength={1}
                      value={digit}
                      onChange={(e) => handleCodeChange(index, e.target.value)}
                      onKeyDown={(e) => handleKeyDown(e, index)}
                      className="h-14 w-12 text-center text-xl font-mono"
                      autoFocus={index === 0}
                    />
                  ))}
                </div>
                
                {error && (
                  <div className="flex items-center text-sm text-red-600 dark:text-red-400">
                    <AlertCircle className="h-4 w-4 mr-1" />
                    {error}
                  </div>
                )}
                
                <div className="flex justify-between items-center mt-4">
                  <p className="text-sm text-muted-foreground">
                    Code expires in {Math.floor(countdown / 60)}:{(countdown % 60).toString().padStart(2, '0')}
                  </p>
                  <Button 
                    variant="link" 
                    className="h-auto p-0 text-sm"
                    onClick={handleResendCode}
                    disabled={countdown > 0 || isLoading}
                  >
                    {isLoading ? 'Sending...' : 'Resend code'}
                  </Button>
                </div>
              </div>
              
              <div className="space-y-2">
                <h3 className="text-sm font-medium">Having trouble?</h3>
                <p className="text-sm text-muted-foreground">
                  Make sure the time on your authenticator device is correct and try again.
                </p>
              </div>
            </div>
          )}
          
          {step === 'COMPLETE' && (
            <div className="space-y-6">
              <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800 text-center">
                <CheckCircle2 className="h-12 w-12 text-green-500 mx-auto mb-2" />
                <h3 className="text-lg font-medium text-green-800 dark:text-green-200">Two-factor authentication enabled</h3>
                <p className="text-sm text-green-700 dark:text-green-300 mt-1">
                  Your account is now protected with an extra layer of security.
                </p>
              </div>
              
              <div className="space-y-4">
                <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800">
                  <h3 className="font-medium text-yellow-800 dark:text-yellow-200 flex items-center">
                    <AlertCircle className="h-4 w-4 mr-2" />
                    Save your recovery codes
                  </h3>
                  <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
                    These codes can be used to access your account if you lose access to your authenticator app.
                    Each code can only be used once.
                  </p>
                  
                  <div className="mt-3 bg-white dark:bg-gray-900 p-3 rounded border border-dashed border-yellow-300 dark:border-yellow-700">
                    <ul className="grid grid-cols-2 gap-2 text-sm font-mono">
                      {recoveryCodes.slice(0, 4).map((code, index) => (
                        <li key={index} className="p-1">{code}</li>
                      ))}
                    </ul>
                    <div className="mt-2 text-xs text-yellow-600 dark:text-yellow-400">
                      +{recoveryCodes.length - 4} more codes not shown
                    </div>
                  </div>
                  
                  <div className="flex flex-col sm:flex-row gap-2 mt-3">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="flex-1"
                      onClick={handleCopyCodes}
                      id="copy-codes-btn"
                    >
                      Copy all codes
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="flex-1"
                      onClick={handleDownloadCodes}
                    >
                      Download
                    </Button>
                  </div>
                </div>
                
                <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
                  <h3 className="font-medium text-blue-800 dark:text-blue-200">What's next?</h3>
                  <ul className="mt-2 space-y-2 text-sm text-blue-700 dark:text-blue-300">
                    <li className="flex items-start">
                      <span className="mr-2">•</span>
                      <span>Save your recovery codes in a secure location</span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">•</span>
                      <span>You'll need to enter a code from your authenticator app each time you sign in</span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">•</span>
                      <span>You can manage your 2FA settings in your account security page</span>
                    </li>
                  </ul>
                </div>
              </div>
              
              <Button 
                className="w-full" 
                onClick={handleComplete}
              >
                Go to Dashboard
              </Button>
            </div>
          )}
        </CardContent>
        
        <CardFooter className="flex justify-center">
          <p className="text-center text-xs text-muted-foreground">
            Two-factor authentication adds an extra layer of security to your account.
          </p>
        </CardFooter>
      </Card>
    </div>
  )
}
