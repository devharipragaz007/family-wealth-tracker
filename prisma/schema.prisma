// This is your Prisma schema file for comprehensive family wealth tracking
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ============================================================================
// USER & WORKSPACE MANAGEMENT
// ============================================================================
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Workspace relationships
  workspaces     WorkspaceUser[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  // Activity tracking
  activities     Activity[]
  
  @@map("users")
}
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  currency    String   @default("USD")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Owner relationship
  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  // Members
  members WorkspaceUser[]
  // Financial entities
  accounts       Account[]
  assets         Asset[]
  stockHoldings  StockHolding[]
  budgets        Budget[]
  transactions   Transaction[]
  goals          Goal[]
  netWorthSnapshots NetWorthSnapshot[]
  
  @@map("workspaces")
}
model WorkspaceUser {
  id          String          @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole   @default(VIEWER)
  joinedAt    DateTime        @default(now())
  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId])
  @@map("workspace_users")
}
enum WorkspaceRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}
// ============================================================================
// FINANCIAL ACCOUNTS
// ============================================================================
model Account {
  id            String      @id @default(cuid())
  name          String
  type          AccountType
  subtype       String?
  institutionId String?
  accountNumber String?
  routingNumber String?
  balance       Decimal     @default(0)
  creditLimit   Decimal?
  interestRate  Decimal?
  maturityDate  DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  transactions Transaction[]
  
  @@map("accounts")
}
enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  RETIREMENT_401K
  RETIREMENT_IRA
  RETIREMENT_ROTH_IRA
  LOAN
  MORTGAGE
  STUDENT_LOAN
  AUTO_LOAN
  PERSONAL_LOAN
  LINE_OF_CREDIT
  CERTIFICATE_OF_DEPOSIT
  MONEY_MARKET
  BUSINESS
  OTHER
}
// ============================================================================
// TRANSACTIONS
// ============================================================================
model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal
  description String
  category    String?
  subcategory String?
  type        TransactionType
  date        DateTime
  notes       String?
  tags        String[]
  
  // External identifiers (for bank syncing)
  externalId     String?
  institutionId  String?
  pending        Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}
// ============================================================================
// INVESTMENTS & ASSETS
// ============================================================================
model Asset {
  id            String     @id @default(cuid())
  name          String
  type          AssetType
  category      String?
  currentValue  Decimal
  purchasePrice Decimal?
  purchaseDate  DateTime?
  quantity      Decimal?
  location      String?
  description   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("assets")
}
model StockHolding {
  id           String  @id @default(cuid())
  symbol       String
  companyName  String?
  shares       Decimal
  averageCost  Decimal
  currentPrice Decimal?
  sector       String?
  exchange     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("stock_holdings")
}
enum AssetType {
  REAL_ESTATE
  VEHICLE
  JEWELRY
  ART
  COLLECTIBLES
  CRYPTOCURRENCY
  BUSINESS_OWNERSHIP
  INTELLECTUAL_PROPERTY
  PRECIOUS_METALS
  FURNITURE
  ELECTRONICS
  OTHER
}
enum RealEstateType {
  PRIMARY_RESIDENCE
  INVESTMENT_PROPERTY
  VACATION_HOME
  COMMERCIAL
  LAND
  OTHER
}
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  INVESTMENT_BUY
  INVESTMENT_SELL
  DIVIDEND
  INTEREST
  WITHDRAWAL
  DEPOSIT
}
// ============================================================================
// BUDGETING & GOALS
// ============================================================================
model Budget {
  id          String       @id @default(cuid())
  name        String
  category    String
  subcategory String?
  amount      Decimal
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean      @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}
model Goal {
  id            String       @id @default(cuid())
  name          String
  description   String?
  targetAmount  Decimal
  currentAmount Decimal      @default(0)
  category      GoalCategory
  targetDate    DateTime?
  status        GoalStatus   @default(ACTIVE)
  priority      Int          @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}
enum GoalCategory {
  EMERGENCY_FUND
  RETIREMENT
  HOME_PURCHASE
  EDUCATION
  VACATION
  DEBT_PAYOFF
  INVESTMENT
  CAR_PURCHASE
  OTHER
}
enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}
enum BudgetPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}
// ============================================================================
// NET WORTH TRACKING
// ============================================================================
model NetWorthSnapshot {
  id        String   @id @default(cuid())
  date      DateTime
  netWorth  Decimal
  assets    Decimal
  liabilities Decimal
  notes     String?
  
  createdAt DateTime @default(now())
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("net_worth_snapshots")
}
// ============================================================================
// ACTIVITY TRACKING
// ============================================================================
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt DateTime @default(now())
  
  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}
enum ActivityType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  INVITE_USER
  REMOVE_USER
  SYNC_DATA
  EXPORT_DATA
}
