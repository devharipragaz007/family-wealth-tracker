// This is your Prisma schema file for comprehensive family wealth tracking
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & WORKSPACE MANAGEMENT
// ============================================================================

enum WorkspaceRole {
  OWNER
  EDITOR
  VIEWER
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(USER)
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Workspace relationships
  workspaces     WorkspaceUser[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  
  // Financial relationships
  accounts      Account[]
  budgets       Budget[]
  goals         Goal[]
  transactions  Transaction[]
  reports       Report[]
  notifications Notification[]
  
  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  owner User @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Relationships
  members      WorkspaceUser[]
  accounts     Account[]
  budgets      Budget[]
  goals        Goal[]
  transactions Transaction[]
  categories   Category[]
  reports      Report[]
  
  @@map("workspaces")
}

model WorkspaceUser {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(VIEWER)
  joinedAt    DateTime      @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
  @@map("workspace_users")
}

// ============================================================================
// FINANCIAL ACCOUNTS & TRANSACTIONS
// ============================================================================

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  RETIREMENT
  LOAN
  MORTGAGE
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

model Account {
  id          String      @id @default(cuid())
  name        String
  type        AccountType
  balance     Decimal     @default(0) @db.Decimal(12, 2)
  currency    String      @default("USD")
  description String?
  isActive    Boolean     @default(true)
  
  userId      String
  workspaceId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace?    @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  
  // Relationships
  transactions Transaction[]
  investments  Investment[]
  
  @@map("accounts")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Hex color code
  icon        String?
  parentId    String?  // For subcategories
  
  workspaceId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryParent")
  
  // Relationships
  transactions Transaction[]
  budgetItems  BudgetItem[]
  
  @@map("categories")
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal         @db.Decimal(12, 2)
  type        TransactionType
  description String?
  date        DateTime
  
  accountId   String
  categoryId  String?
  userId      String
  workspaceId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category  Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  
  @@map("transactions")
}

// ============================================================================
// BUDGETING
// ============================================================================

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum BudgetStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

model Budget {
  id          String       @id @default(cuid())
  name        String
  description String?
  period      BudgetPeriod
  status      BudgetStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime
  totalAmount Decimal      @db.Decimal(12, 2)
  
  userId      String
  workspaceId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace?  @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  
  // Relationships
  items BudgetItem[]
  
  @@map("budgets")
}

model BudgetItem {
  id           String  @id @default(cuid())
  name         String
  budgetedAmount Decimal @db.Decimal(12, 2)
  spentAmount    Decimal @default(0) @db.Decimal(12, 2)
  
  budgetId   String
  categoryId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  budget   Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  @@map("budget_items")
}

// ============================================================================
// GOALS & PLANNING
// ============================================================================

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum GoalType {
  SAVINGS
  DEBT_PAYOFF
  INVESTMENT
  EMERGENCY_FUND
  OTHER
}

model Goal {
  id            String     @id @default(cuid())
  name          String
  description   String?
  type          GoalType
  status        GoalStatus @default(ACTIVE)
  targetAmount  Decimal    @db.Decimal(12, 2)
  currentAmount Decimal    @default(0) @db.Decimal(12, 2)
  targetDate    DateTime?
  
  userId      String
  workspaceId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  
  // Relationships
  milestones GoalMilestone[]
  
  @@map("goals")
}

model GoalMilestone {
  id          String   @id @default(cuid())
  title       String
  description String?
  targetAmount Decimal @db.Decimal(12, 2)
  targetDate  DateTime
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  
  goalId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  @@map("goal_milestones")
}

// ============================================================================
// INVESTMENTS & ASSETS
// ============================================================================

enum AssetType {
  STOCK
  BOND
  MUTUAL_FUND
  ETF
  CRYPTOCURRENCY
  REAL_ESTATE
  COMMODITY
  OTHER
}

model Investment {
  id          String    @id @default(cuid())
  symbol      String
  name        String
  type        AssetType
  quantity    Decimal   @db.Decimal(12, 6)
  avgCost     Decimal   @db.Decimal(12, 2)
  currentPrice Decimal? @db.Decimal(12, 2)
  
  accountId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("investments")
}

// ============================================================================
// REPORTS & ANALYTICS
// ============================================================================

model Report {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g., 'income_expense', 'net_worth', 'budget_analysis'
  parameters  Json?    // Store report configuration
  generatedAt DateTime
  
  userId      String
  workspaceId String?
  
  createdAt DateTime @default(now())
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  
  @@map("reports")
}

// ============================================================================
// NOTIFICATIONS & ALERTS
// ============================================================================

enum NotificationType {
  BUDGET_EXCEEDED
  GOAL_MILESTONE
  LOW_BALANCE
  BILL_DUE
  INVESTMENT_ALERT
  SYSTEM
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  
  userId String
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}
