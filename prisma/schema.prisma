// This is your Prisma schema file for comprehensive family wealth tracking
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & WORKSPACE MANAGEMENT
// ============================================================================

enum WorkspaceRole {
  OWNER
  EDITOR
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      WorkspaceRole @default(VIEWER)
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Workspace relationships
  workspaces     WorkspaceUser[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  
  // Activity tracking
  activities     Activity[]
  
  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  currency    String   @default("USD")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Owner relationship
  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Members
  members WorkspaceUser[]
  
  // Financial entities
  accounts       Account[]
  assets         Asset[]
  stockHoldings  StockHolding[]
  budgets        Budget[]
  transactions   Transaction[]
  goals          Goal[]
  netWorthSnapshots NetWorthSnapshot[]
  
  @@map("workspaces")
}

model WorkspaceUser {
  id          String          @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole   @default(VIEWER)
  joinedAt    DateTime        @default(now())
  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId])
  @@map("workspace_users")
}

// ============================================================================
// FINANCIAL ACCOUNTS
// ============================================================================

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  RETIREMENT
  CREDIT_CARD
  LOAN
  MORTGAGE
  OTHER
}

enum AccountProvider {
  MANUAL
  PLAID
  YODLEE
  OTHER
}

model Account {
  id              String          @id @default(cuid())
  name            String
  type            AccountType
  provider        AccountProvider @default(MANUAL)
  accountNumber   String?
  routingNumber   String?
  balance         Decimal         @default(0)
  currency        String          @default("USD")
  isActive        Boolean         @default(true)
  lastSyncAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  transactions Transaction[]
  
  @@map("accounts")
}

// ============================================================================
// TRANSACTIONS
// ============================================================================

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionCategory {
  // Income categories
  SALARY
  FREELANCE
  INVESTMENT_INCOME
  RENTAL_INCOME
  OTHER_INCOME
  
  // Expense categories
  HOUSING
  TRANSPORTATION
  FOOD
  UTILITIES
  INSURANCE
  HEALTHCARE
  ENTERTAINMENT
  EDUCATION
  PERSONAL_CARE
  SHOPPING
  TRAVEL
  BUSINESS
  CHARITY
  OTHER_EXPENSE
  
  // Transfer
  TRANSFER_IN
  TRANSFER_OUT
}

model Transaction {
  id          String              @id @default(cuid())
  description String
  amount      Decimal
  date        DateTime
  type        TransactionType
  category    TransactionCategory
  notes       String?
  
  // External transaction ID (for bank imports)
  externalId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  accountId   String
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

// ============================================================================
// ASSETS & INVESTMENTS
// ============================================================================

enum AssetType {
  REAL_ESTATE
  VEHICLE
  JEWELRY
  ART
  COLLECTIBLES
  CRYPTOCURRENCY
  OTHER
}

model Asset {
  id           String    @id @default(cuid())
  name         String
  type         AssetType
  currentValue Decimal
  purchaseDate DateTime?
  purchasePrice Decimal?
  notes        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("assets")
}

model StockHolding {
  id            String  @id @default(cuid())
  symbol        String
  companyName   String?
  shares        Decimal
  averageCost   Decimal
  currentPrice  Decimal?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("stock_holdings")
}

// ============================================================================
// BUDGETING
// ============================================================================

enum BudgetPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

model Budget {
  id          String       @id @default(cuid())
  name        String
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime
  totalBudget Decimal
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  categories BudgetCategory[]
  
  @@map("budgets")
}

model BudgetCategory {
  id            String              @id @default(cuid())
  category      TransactionCategory
  allocatedAmount Decimal
  spentAmount   Decimal             @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  budgetId String
  budget   Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  
  @@map("budget_categories")
}

// ============================================================================
// GOALS
// ============================================================================

enum GoalType {
  SAVINGS
  DEBT_PAYOFF
  INVESTMENT
  NET_WORTH
  OTHER
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

model Goal {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        GoalType
  status      GoalStatus @default(ACTIVE)
  targetAmount Decimal
  currentAmount Decimal   @default(0)
  targetDate  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}

// ============================================================================
// NET WORTH TRACKING
// ============================================================================

model NetWorthSnapshot {
  id        String   @id @default(cuid())
  date      DateTime
  netWorth  Decimal
  assets    Decimal
  liabilities Decimal
  notes     String?
  
  createdAt DateTime @default(now())
  
  // Relationships
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("net_worth_snapshots")
}

// ============================================================================
// ACTIVITY TRACKING
// ============================================================================

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt DateTime @default(now())
  
  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  INVITE_USER
  REMOVE_USER
  SYNC_DATA
  EXPORT_DATA
}
