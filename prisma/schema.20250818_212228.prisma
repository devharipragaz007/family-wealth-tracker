// This is your Prisma schema file for comprehensive family wealth tracking
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [pg_trgm, pgcrypto]
  // For migrations, we'll use a separate database as shadow
  // This is a temporary database that Prisma will use during migrations
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  OWNER
  EDITOR
  VIEWER
}

enum AssetType {
  // Core Investments
  INDIAN_STOCK
  US_STOCK
  MUTUAL_FUND
  SIP
  
  // Alternative Investments
  REAL_ESTATE
  GOLD
  SILVER
  CRYPTO
  IPO
  
  // Traditional Savings
  FIXED_DEPOSIT
  RECURRING_DEPOSIT
  CHIT_FUND
  
  // Other
  BONDS
  DEBENTURES
  NPS
  PPF
  EPF
  SSY
  NSC
  ULIP
  OTHER
}

enum TransactionType {
  BUY
  SELL
  DIVIDEND
  INTEREST
  BONUS
  SPLIT
  MERGER
  TRANSFER_IN
  TRANSFER_OUT
  SWP
  STP
  SIP
  LUMPSUM
  REDEMPTION
  MATURITY
  PREMATURE_WITHDRAWAL
  RENTAL_INCOME
  MAINTENANCE_FEE
  PROPERTY_TAX
  AIRDROP
  STAKING_REWARD
  FORK
  ADJUSTMENT
  FEE
  TAX
  REBALANCE
}

enum AccountType {
  SAVINGS
  CURRENT
  DEMAT
  NRE
  NRO
  FIXED_DEPOSIT
  RECURRING_DEPOSIT
  CREDIT_CARD
  LOAN
  WALLET
  OTHER
}

enum InvestmentType {
  // Mutual Fund Categories
  EQUITY
  DEBT
  HYBRID
  INDEX
  ETF
  GOLD_ETF
  INTERNATIONAL
  SECTORAL
  TAX_SAVING_ELSS
  ARBITRAGE
  BALANCED
  
  // Fixed Income
  CORPORATE_BONDS
  GOVERNMENT_SECURITIES
  
  // Alternative Investments
  REAL_ESTATE
  GOLD
  SILVER
  CRYPTO
  
  // Retirement
  NPS
  PPF
  EPF
  
  // Insurance
  ULIP
  
  // Others
  IPO
  BONDS
  DEBENTURES
  OTHER
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Frequency {
  DAILY
  WEEKLY
  FORTNIGHTLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
  MATURITY
  CUSTOM
}

enum MetalType {
  GOLD
  SILVER
  PLATINUM
  OTHER
}

enum MetalForm {
  COIN
  BAR
  JEWELRY
  ETF
  SOVEREIGN_GOLD_BOND
  DIGITAL_GOLD
  OTHER
}

enum RealEstateType {
  RESIDENTIAL
  COMMERCIAL
  PLOT
  AGRICULTURAL
  INDUSTRIAL
  OTHER
}

enum RealEstatePurpose {
  SELF_OCCUPIED
  RENTAL
  INVESTMENT
  VACATION_HOME
  INHERITED
  OTHER
}

enum CompoundingFrequency {
  SIMPLE
  QUARTERLY
  MONTHLY
  HALF_YEARLY
  YEARLY
  MATURITY
}

// ============================================================================
// COMMON INTERFACES
// ============================================================================

model BaseHolding {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId   String    @db.Uuid
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name          String
  assetType     AssetType
  investmentType InvestmentType
  notes         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Common fields for all holdings
  currentValue  Decimal   @default(0) @db.Decimal(19, 4)
  investedAmount Decimal  @default(0) @db.Decimal(19, 4)
  profitLoss    Decimal   @default(0) @db.Decimal(19, 4)
  profitLossPct Decimal   @default(0) @db.Decimal(10, 2)
  currency      String    @default("INR")
  
  // Relations
  transactions  Transaction[]
  
  @@map("holdings")
  @@index([workspaceId])
  @@index([assetType])
  @@index([investmentType])
}

// ============================================================================
// SPECIFIC INVESTMENT MODELS
// ============================================================================

model StockHolding {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // Stock specific fields
  symbol            String
  isin              String?
  exchange          String
  sector            String?
  industry          String?
  country           String  @default("IN")
  
  // Current position
  quantity          Decimal @default(0) @db.Decimal(19, 4)
  averageBuyPrice   Decimal @default(0) @db.Decimal(19, 4)
  currentPrice      Decimal @default(0) @db.Decimal(19, 4)
  
  // Performance metrics
  dayChange         Decimal @default(0) @db.Decimal(10, 2)
  dayChangePercent  Decimal @default(0) @db.Decimal(10, 2)
  
  @@map("stock_holdings")
  @@index([symbol, exchange])
  @@index([sector])
}

model MutualFundHolding {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // MF specific fields
  amfiCode          String?
  isin              String
  fundHouse         String
  category          String
  subCategory       String?
  benchmark         String?
  nav               Decimal @default(0) @db.Decimal(19, 4)
  lastNavDate       DateTime?
  
  // SIP details
  isSipActive       Boolean @default(false)
  sipAmount         Decimal @default(0) @db.Decimal(19, 2)
  sipDay            Int?
  sipStartDate      DateTime?
  
  @@map("mutual_fund_holdings")
  @@index([isin])
  @@index([fundHouse])
  @@index([category])
}

model FixedDeposit {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // FD specific fields
  accountNumber     String
  bankName          String
  branch            String?
  startDate         DateTime
  maturityDate      DateTime
  principal         Decimal @db.Decimal(19, 2)
  interestRate      Decimal @db.Decimal(5, 2)
  compoundingFrequency CompoundingFrequency
  interestPayoutFrequency Frequency
  taxDeductedAtSource Boolean @default(false)
  
  // Maturity details
  maturityAmount    Decimal @db.Decimal(19, 2)
  interestEarned    Decimal @db.Decimal(19, 2)
  
  @@map("fixed_deposits")
}

model RealEstate {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // Property details
  propertyType       RealEstateType
  address            String
  city               String
  state              String
  country            String @default("India")
  pinCode            String
  area               Decimal @db.Decimal(10, 2) // in sq.ft
  purchaseDate       DateTime
  purchasePrice      Decimal @db.Decimal(19, 2)
  currentValue       Decimal @db.Decimal(19, 2)
  
  // Ownership
  ownershipType      String // Freehold, Leasehold, etc.
  coOwners           String? // JSON array of co-owners
  
  // Rental details if applicable
  isRented           Boolean @default(false)
  monthlyRent        Decimal? @db.Decimal(19, 2)
  maintenanceCharges Decimal? @db.Decimal(10, 2)
  
  // Loan details if applicable
  hasLoan            Boolean @default(false)
  loanAmount         Decimal? @db.Decimal(19, 2)
  emi                Decimal? @db.Decimal(10, 2)
  
  // Documents
  registrationDoc    String? // URL to document
  taxReceipts        String? // URL to receipts
  
  @@map("real_estate")
}

model GoldSilverHolding {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // Metal details
  metalType           MetalType
  metalForm           MetalForm
  purity              Decimal @db.Decimal(5, 3) // e.g., 0.999 for 99.9% pure
  weight              Decimal @db.Decimal(10, 4) // in grams
  
  // Purchase details
  purchaseDate        DateTime
  purchasePricePerGram Decimal @db.Decimal(19, 2)
  currentPricePerGram Decimal @db.Decimal(19, 2)
  
  // Storage details
  storageLocation     String? // e.g., Bank Locker, Home, Demat
  lockerDetails       String? // If stored in locker
  
  // For digital gold/silver
  isDigital           Boolean @default(false)
  platform            String? // e.g., Augmont, MMTC-PAMP
  
  @@map("precious_metals")
}

model CryptocurrencyHolding {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // Crypto details
  symbol              String
  name                String
  blockchain          String?
  
  // Holdings
  quantity            Decimal @db.Decimal(36, 18)
  averageBuyPrice     Decimal @db.Decimal(36, 18)
  currentPrice        Decimal @db.Decimal(36, 18)
  
  // Wallet/Exchange details
  platform            String  // e.g., Binance, WazirX, Hardware Wallet
  walletAddress       String?
  isStaked            Boolean @default(false)
  
  @@map("cryptocurrency_holdings")
  @@index([symbol])
}

model IpoApplication {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // IPO details
  companyName         String
  issueType           String  // Mainboard, SME, etc.
  issueSize           Decimal? @db.Decimal(19, 2)
  priceRangeMin       Decimal @db.Decimal(10, 2)
  priceRangeMax       Decimal @db.Decimal(10, 2)
  lotSize             Int
  minBidQuantity      Int
  
  // Application details
  appliedLots         Int
  appliedAmount       Decimal @db.Decimal(19, 2)
  applicationNumber   String?
  
  // Allotment details
  status              String  // Applied, Allotted, Rejected, Listed
  allottedLots        Int? @default(0)
  allottedShares      Int? @default(0)
  refundAmount        Decimal? @db.Decimal(19, 2)
  
  // Listing details
  listingDate         DateTime?
  listingPrice        Decimal? @db.Decimal(10, 2)
  currentPrice        Decimal? @db.Decimal(10, 2)
  
  @@map("ipo_applications")
}

model ChitFund {
  // Base fields
  id          String  @id @db.Uuid
  base        BaseHolding @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // Chit details
  chitName            String
  chitValue           Decimal @db.Decimal(19, 2)
  durationMonths      Int
  monthlyInstallment  Decimal @db.Decimal(10, 2)
  startDate           DateTime
  endDate             DateTime
  
  // Bidding details
  isBidWon            Boolean @default(false)
  bidAmount           Decimal? @db.Decimal(19, 2)
  bidDate             DateTime?
  
  // Returns
  totalPaid           Decimal @db.Decimal(19, 2) @default(0)
  totalReceived       Decimal @db.Decimal(19, 2) @default(0)
  
  @@map("chit_funds")
}

// ============================================================================
// MODELS
// ============================================================================

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            UserRole  @default(VIEWER)
  isActive        Boolean   @default(true)
  timezone        String?   @default("Asia/Kolkata")
  currency        String    @default("INR")
  locale          String?   @default("en-IN")
  lastLoginAt     DateTime?
  
  // Relations
  sessions      Session[]
  memberships   WorkspaceMember[]
  activityLogs  ActivityLog[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Session {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  ipAddress     String?
  userAgent     String?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("sessions")
}

model VerificationToken {
  identifier  String   @unique
  token       String   @unique
  expires     DateTime
  
  createdAt   DateTime @default(now())
  
  @@map("verification_tokens")
}

model Workspace {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  currency    String    @default("INR")
  timezone    String    @default("Asia/Kolkata")
  isDefault   Boolean   @default(false)
  
  // Relations
  members          WorkspaceMember[]
  stockHoldings    StockHolding[]
  usStockHoldings  UsStockHolding[]
  mutualFunds      MutualFundHolding[]
  sipPlans         SipPlan[]
  cryptoHoldings   CryptoHolding[]
  ipoApplications  IpoApplication[]
  metalTxns        MetalTxn[]
  realEstates      RealEstate[]
  fixedDeposits    FixedDeposit[]
  recurringDeposits RecurringDeposit[]
  chits            Chit[]
  fxTransfers      FxTransfer[]
  fxPriceRefs      FxPriceRef[]
  allocationTargets AllocationTarget[]
  monthAggregates  MonthAggregate[]
  settings         Settings?
  emergencyFund    EmergencyFund?
  savingsLedgers   SavingsLedger[]
  activityLogs     ActivityLog[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("workspaces")
}

model WorkspaceMember {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role        UserRole  @default(VIEWER)
  
  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

// ============================================================================
// FINANCIAL MODELS
// ============================================================================

model Settings {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  baseCurrency String   @default("INR")
  usdToInr    Float     @default(83.0)
  monthStart  Int       @default(1) // 1-28
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("settings")
}

model AllocationTarget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  instrumentName String
  idealPct      Float     // 0-100
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([workspaceId, instrumentName])
  @@map("allocation_targets")
}

model MonthAggregate {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  month          DateTime
  invested       Decimal   @db.Decimal(20, 2)
  current        Decimal   @db.Decimal(20, 2)
  pnl            Decimal   @db.Decimal(20, 2)
  pnlPct         Float
  growthMoM      Decimal   @db.Decimal(20, 2)
  growthMoMPct   Float
  investedMoM    Decimal   @db.Decimal(20, 2)
  investedMoMPct Float
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@unique([workspaceId, month])
  @@map("month_aggregates")
}

// ============================================================================
// HOLDINGS
// ============================================================================

model StockHolding {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name          String
  type          String?   // Equity, Preference, etc.
  symbol        String?
  marketCap     String?   // Large, Mid, Small Cap
  industry      String?
  
  avgBuyPrice   Decimal   @db.Decimal(20, 2)
  qty           Int
  cmp           Decimal   @db.Decimal(20, 2)
  invested      Decimal   @db.Decimal(20, 2)
  currentValue  Decimal   @db.Decimal(20, 2)
  pnl           Decimal   @db.Decimal(20, 2)
  pnlPct        Float
  isLongTerm    Boolean   @default(false)
  performance   Json?     // Historical performance data
  sellDate      DateTime?
  reviewDate    DateTime?
  buyReason     String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([workspaceId, name, symbol])
  @@map("stock_holdings")
}

model UsStockHolding {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId    String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name           String
  avgBuyPriceUsd Decimal   @db.Decimal(20, 2)
  qty            Decimal   @db.Decimal(10, 4)
  investedUsd    Decimal   @db.Decimal(20, 2)
  currentUsd     Decimal   @db.Decimal(20, 2)
  pnlUsd         Decimal   @db.Decimal(20, 2)
  pnlPctUsd      Float
  
  // In INR (derived using Settings.usdToInr)
  avgBuyPriceInr Decimal   @db.Decimal(20, 2)
  investedInr    Decimal   @db.Decimal(20, 2)
  currentInr     Decimal   @db.Decimal(20, 2)
  pnlInr         Decimal   @db.Decimal(20, 2)
  pnlPctInr      Float
  
  symbol         String?
  exchange       String?   @default("NYSE")
  sector         String?
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@unique([workspaceId, name, symbol])
  @@map("us_stock_holdings")
}

model MutualFundHolding {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  fundName      String
  fundType      String?   // Equity, Debt, Hybrid, etc.
  amcName       String?
  folioNumber   String?
  
  invested      Decimal   @db.Decimal(20, 2)
  current       Decimal   @db.Decimal(20, 2)
  returns       Decimal   @db.Decimal(20, 2)
  returnsPct    Float
  
  units         Decimal   @db.Decimal(12, 4)
  nav           Decimal   @db.Decimal(12, 4)
  navDate       DateTime?
  
  startDate     DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([workspaceId, fundName, folioNumber])
  @@map("mutual_fund_holdings")
}

model SipPlan {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  fundName        String
  type            String?   // Equity, Debt, Hybrid, etc.
  sipAmount       Decimal   @db.Decimal(12, 2)
  sipDayOfMonth   Int       @default(1) // 1-31
  
  stepUpEnabled   Boolean   @default(false)
  stepUpAmount    Decimal?  @db.Decimal(12, 2)
  stepUpFrequency Int?      // In months
  
  startDate       DateTime
  endDate         DateTime?
  active          Boolean   @default(true)
  
  // Calculated fields
  totalInvested   Decimal   @db.Decimal(20, 2) @default(0)
  currentValue    Decimal   @db.Decimal(20, 2) @default(0)
  returns         Decimal   @db.Decimal(20, 2) @default(0)
  returnsPct      Float     @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("sip_plans")
}

model CryptoHolding {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name          String
  symbol        String
  qty           Decimal   @db.Decimal(24, 8)
  
  avgPrice      Decimal   @db.Decimal(20, 2)
  invested      Decimal   @db.Decimal(20, 2)
  
  currentPrice  Decimal   @db.Decimal(20, 2)
  currentValue  Decimal   @db.Decimal(20, 2)
  
  returns       Decimal   @db.Decimal(20, 2)
  returnsPct    Float
  
  walletAddress String?
  exchange      String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([workspaceId, name, symbol, walletAddress])
  @@map("crypto_holdings")
}

model IpoApplication {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  date            DateTime
  name            String
  type            String?   // Mainboard, SME, etc.
  
  rate            Decimal   @db.Decimal(10, 2)
  qty             Int
  amount          Decimal   @db.Decimal(20, 2)
  
  allotedQty      Int       @default(0)
  allotedAmount   Decimal   @db.Decimal(20, 2) @default(0)
  
  listingPrice    Decimal?  @db.Decimal(10, 2)
  listingGain     Decimal?  @db.Decimal(20, 2)
  listingGainPct  Float?
  
  holdLongTerm    Boolean   @default(false)
  notes           String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("ipo_applications")
}

model MetalTxn {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  metal           MetalType
  date            DateTime
  type            MetalForm
  
  qty             Decimal   @db.Decimal(12, 4)
  rate            Decimal   @db.Decimal(12, 2)
  
  purchasePrice   Decimal   @db.Decimal(20, 2)
  currentRate     Decimal   @db.Decimal(12, 2)
  currentValue    Decimal   @db.Decimal(20, 2)
  
  returns         Decimal   @db.Decimal(20, 2)
  returnsPct      Float
  
  notes           String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("metal_transactions")
}

model RealEstate {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name            String
  type            RealEstateType
  address         String
  mapUrl          String?
  
  buyDate         DateTime
  buyPrice        Decimal   @db.Decimal(20, 2)
  
  currentPrice    Decimal   @db.Decimal(20, 2)
  currentValue    Decimal   @db.Decimal(20, 2)
  
  xirr            Float?
  
  area            Decimal?  @db.Decimal(10, 2) // in sq.ft
  unitNumber      String?
  city            String?
  state           String?
  country         String?   @default("India")
  pinCode         String?
  
  purpose         RealEstatePurpose
  isLongTerm      Boolean   @default(false)
  
  docsUrl         String?   // Link to documents in Supabase Storage
  
  // Relations
  cashflows      RealEstateCashflow[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("real_estates")
}

model RealEstateCashflow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  realEstateId  String
  realEstate    RealEstate @relation(fields: [realEstateId], references: [id], onDelete: Cascade)
  
  date          DateTime
  amount        Decimal   @db.Decimal(20, 2)
  type          String    // RENT, MAINTENANCE, TAX, REPAIR, OTHER
  description   String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("real_estate_cashflows")
}

model FixedDeposit {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name            String
  bankName        String
  accountNumber   String?
  
  startDate       DateTime
  principal       Decimal   @db.Decimal(20, 2)
  interestRatePct Decimal   @db.Decimal(5, 2)
  
  compounding     CompoundingFrequency @default(QUARTERLY)
  
  maturityDate    DateTime
  maturityAmount  Decimal   @db.Decimal(20, 2)
  
  currentValue    Decimal   @db.Decimal(20, 2)
  interestEarned  Decimal   @db.Decimal(20, 2)
  
  purpose         String?
  isTaxSaving     Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("fixed_deposits")
}

model RecurringDeposit {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name            String
  bankName        String
  accountNumber   String?
  
  startDate       DateTime
  monthlyAmount   Decimal   @db.Decimal(20, 2)
  
  interestRatePct Decimal   @db.Decimal(5, 2)
  totalMonths     Int
  
  maturityDate    DateTime
  maturityAmount  Decimal   @db.Decimal(20, 2)
  
  currentValue    Decimal   @db.Decimal(20, 2)
  interestEarned  Decimal   @db.Decimal(20, 2)
  
  monthsCompleted Int
  
  purpose         String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("recurring_deposits")
}

model Chit {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  name            String
  organizer       String
  
  totalAmount     Decimal   @db.Decimal(20, 2)
  monthlyAmount   Decimal   @db.Decimal(20, 2)
  
  startDate       DateTime
  endDate         DateTime
  
  xirr            Float?
  
  // Relations
  transactions    ChitTxn[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("chits")
}

model ChitTxn {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chitId          String
  chit            Chit      @relation(fields: [chitId], references: [id], onDelete: Cascade)
  
  date            DateTime
  amount          Decimal   @db.Decimal(20, 2)
  
  isBid           Boolean   @default(false)
  isDividend      Boolean   @default(false)
  
  dividendEarned  Decimal?  @db.Decimal(20, 2)
  paidCumulative  Decimal?  @db.Decimal(20, 2)
  
  description     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("chit_transactions")
}

// ============================================================================
// FOREIGN EXCHANGE
// ============================================================================

model EmergencyFund {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  targetMonths   Int
  currentAmount  Float
  monthlyExpenses Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([workspaceId])
}

model FxTransfer {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId           String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  date                  DateTime
  
  // MXN Details
  mxn                   Decimal   @db.Decimal(20, 2)
  
  // Crypto Details
  cryptoName            String
  cryptoRateMxn         Decimal   @db.Decimal(20, 2)
  qty                   Decimal   @db.Decimal(24, 8)
  
  // INR Conversion
  cryptoInInr           Decimal   @db.Decimal(20, 2)
  inrConversionValue    Decimal   @db.Decimal(20, 2)
  
  // Final Amount
  finalInrInBank        Decimal   @db.Decimal(20, 2)
  
  // Commission & Rates
  cryptoCommissionInr   Decimal   @db.Decimal(20, 2)
  cryptoCommissionRate  Decimal   @db.Decimal(5, 2)
  
  altCryptoRate         Decimal?  @db.Decimal(20, 2)
  
  // Paysend Details
  paysendCommissionInr  Decimal?  @db.Decimal(20, 2)
  paysendRate           Decimal?  @db.Decimal(20, 2)
  paysendFinalInr       Decimal?  @db.Decimal(20, 2)
  
  // Difference
  differenceInr         Decimal   @db.Decimal(20, 2)
  
  notes                 String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@map("fx_transfers")
}

model FxPriceRef {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId         String
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  crypto              String
  date                DateTime
  
  buyPriceMxn         Decimal   @db.Decimal(20, 2)
  sellPriceInr        Decimal   @db.Decimal(20, 2)
  
  commissionPct       Decimal   @db.Decimal(5, 2)
  conversionRateNote  String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@unique([workspaceId, crypto, date])
  @@map("fx_price_references")
}

// ============================================================================
// LEDGER & ACTIVITY
// ============================================================================

model SavingsLedger {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  date            DateTime
  details         String
  
  mode            String    // UPI, NEFT, IMPS, CASH, etc.
  amount          Decimal   @db.Decimal(20, 2)
  
  typeAF          String?   // A, B, C, D, E, F ledger type
  
  category        String?
  notes           String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("savings_ledger")
}

model ActivityLog {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  // User who performed the action
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Workspace context
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Action details
  action      String    // CREATE, UPDATE, DELETE, etc.
  entityType  String    // Model name (e.g., "StockHolding", "FixedDeposit")
  entityId    String    // ID of the affected entity
  
  // Change tracking
  beforeJson  Json?     // State before the change
  afterJson   Json?     // State after the change
  
  // Metadata
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([workspaceId])
  @@index([entityType, entityId])
  @@index([createdAt])
  
  @@map("activity_logs")
}
